{"version":3,"sources":["components/todos/addTodo.js","components/todos/deleteTodo.js","components/todos/editTodo.js","components/loader/editingLoader.js","components/todos/todo.js","components/todos/todos.js"],"names":["AddTodoSchema","Yup","shape","todo","required","min","mapDispatchToProps","addTodo","actions","connect","todos","loading","error","useState","isOpened","setIsOpened","onClick","opened","close","initialValues","validationSchema","onSubmit","values","a","setSubmitting","resetForm","isSubmitting","isValid","style","display","flexDirection","height","color","type","name","placeholder","width","justifyContent","disabled","backgroundColor","Controls","styled","div","TodoWrapper","deleteTodo","show","id","input","modifyTodo","useSelector","state","editTodo","TodosWrapper","TodosContainer","Todos","React","memo","content","requested","userId","length","slice","reverse","map","key","compose","firebase","auth","uid","firestore","data","status","firestoreConnect","props"],"mappings":"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","file":"static/js/3.157b0c87.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport Modal from '../modal/modal'\nimport * as actions from '../../store/actions';\n\n\nconst AddTodoSchema = Yup.object().shape({\n    todo: Yup.string()\n        .required('The content is required')\n        .min(4, 'Too short...')\n})\n\nconst AddTodo = ({loading, error, addTodo}) => {\n    const [isOpened, setIsOpened] = useState(false);\n    return (\n        <div>\n            <button onClick={() => setIsOpened(true)}>Add todo</button>\n            <Modal opened={isOpened} close={() => setIsOpened(false)}>\n                <h1>Add your new ToDo</h1>\n                <h3>Type your ToDo and press ADD</h3>\n                <div>\n                    <Formik \n                        initialValues={{\n                            todo: ''\n                        }} \n                        validationSchema={AddTodoSchema} \n                        \n                        onSubmit= {async (values, {setSubmitting, resetForm}) =>{\n                            const res = await addTodo(values) \n                            if(res) {\n                                setIsOpened(false);\n                            }\n                            setSubmitting(false)\n                            resetForm();\n                        }}>\n                        {({isSubmitting, isValid, resetForm}) => (\n                            <Form>\n                                <div style={{display: 'flex', flexDirection: 'column', height: '40px', color: 'red'}}>\n                                    <Field type='text' name='todo' placeholder='Type your todo'/>\n                                    <ErrorMessage  name='todo'/>\n                                </div>\n                                <div style={{display: 'flex', width: '100%', justifyContent: 'space-evenly'}}>\n                                    <button disabled={!isValid || isSubmitting} type='submit'>{loading ? 'Adding...' :'ADD'}</button>\n                                    <button type='button' onClick={() => {setIsOpened(false); resetForm()}}>\n                                        Cancel\n                                    </button>\n                                </div>\n                                {error && <p style={{ backgroundColor: 'red', color: 'white'}}>{error}</p>}\n                            </Form>\n                        )}\n                    </Formik>\n                </div>\n                {/* {errorDeleteUser && <p style={{color: 'red', fontWeight: '800'}}>{errorDeleteUser}</p>} */}\n            </Modal>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({ todos }) => ({\n    loading: todos.loading, \n    error: todos.error\n})\n\nconst mapDispatchToProps = {\n    addTodo: actions.addTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);","import React from 'react';\nimport Modal from '../modal/modal'\nimport styled from 'styled-components';\nimport * as actions from '../../store/actions'\nimport { connect } from 'react-redux';\n\nconst Controls = styled.div`\n    margin-top: 10px;\n    display: flex;\n`;\nconst TodoWrapper = styled.div`\n    padding: 10px 5px;\n    font-weight: 800;\n`;\n\nconst DeleteTodo = ({ show, close, todo, error, loading, deleteTodo}) => {\n    return(\n        <div>\n            <Modal opened={show} close={close}>\n                <h1>Do you want to delete this ToDo?</h1>\n                <TodoWrapper>\n                    {todo.todo}\n                </TodoWrapper>\n                <Controls>\n                    <button onClick={() => deleteTodo(todo.id)}>{loading ? 'Deleting...' : 'Delete'}</button>\n                    <button onClick={close}>Cancel</button>\n                </Controls>\n                {error && <p style={{ backgroundColor: 'red', color: 'white'}}>{error}</p>}\n            </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({todos}) => ({\n    error: todos.deleteTodo.error,\n    loading: todos.deleteTodo.loading\n})\n\nconst mapDispatchToProps = {\n    deleteTodo: actions.deleteTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps )(DeleteTodo);","import React, {useState, useEffect} from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n    display: block;\n    font-size: 20px;\n    margin: 20px 0;\n    padding: 0;\n    width: 100%;\n    text-align: center;\n    border: none;\n\n`;\n\nconst EditTodo = ({todo, toEdit }) => {\n    const [ editTodo, setEditTodo] = useState(todo.todo)\n\n    const handleEditTodo = (e) => {\n        setEditTodo(e.target.value);\n        toEdit(e.target.value);   \n    }\n    \n    return(\n        <Input\n            type='text'\n            value={editTodo}\n            onChange={handleEditTodo}\n            autoFocus\n        />\n    )\n}\nexport default EditTodo;","import React from 'react';\nimport styled from 'styled-components'\n\nconst Spiner = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n    /* background-color: red; */\n    & div{\n        position: absolute;\n        top: 33px;\n        width: 13px;\n        height: 13px;\n        border-radius: 50%;\n        background: orange;\n        animation-timing-function: cubic-bezier(0, 1, 1, 0);\n        &:nth-child(1){\n            left: 8px;\n            animation: lds-ellipsis1 0.6s infinite;\n        }\n        &:nth-child(2){\n            left: 8px;\n            animation: lds-ellipsis2 0.6s infinite;\n        }\n        &:nth-child(3){\n            left: 32px;\n            animation: lds-ellipsis2 0.6s infinite;\n        }\n        &:nth-child(4){\n            left: 56px;\n            animation: lds-ellipsis3 0.6s infinite;\n        }\n    }\n    @keyframes lds-ellipsis1 {\n        0% {\n            transform: scale(0);\n        }\n        100% {\n            transform: scale(1);\n        }\n    }\n    @keyframes lds-ellipsis3 {\n        0% {\n            transform: scale(1);\n        }\n        100% {\n            transform: scale(0);\n        }\n    }\n    @keyframes lds-ellipsis2 {\n        0% {\n            transform: translate(0, 0);\n        }\n        100% {\n            transform: translate(24px, 0);\n        }\n    }\n\n`\n\nconst EditingLoader = () => {\n    return(\n        <Spiner>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </Spiner>\n    )\n};\n\nexport default EditingLoader;","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport DeleteTodo from '../todos/deleteTodo'\nimport EditTodo from './editTodo';\n\nimport * as actions from '../../store/actions'\nimport { connect, useSelector } from 'react-redux';\nimport EditingLoader from '../loader/editingLoader';\n\n\nconst Wrapper = styled.div`\n    width: 300px;\n    position: relative;\n    border: 1px solid black;\n    margin: 5px 0px;\n    text-align: center;\n`;\n\nconst Controls = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    cursor: pointer;\n    i {\n        color: rgb(248, 248, 250);\n    }\n    i:hover{\n        color: yellow;\n    }\n`;\n\nconst TodoContent = styled.div`\n    height: 160px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    p{\n        margin: 0px 0px;\n        font-size: 20px;\n    }\n`;\n\nconst editStyles = {\n    background: 'rgba(0, 200, 0, 1)',\n    flexGrow: '1',\n    padding: '5px 0',\n};\n\nconst deleteStyles = {\n    background: 'rgba(230, 0, 0, 1)',\n    flexGrow: '1',\n    padding: '5px 0',\n};\n\n\n\nconst Todo = ({todo, modifyTodo}) => {\n    const [ isDeleting, setIsDeleting ] = useState(false);\n    const [ isEditing, setIsEditing ] = useState(false);\n    const [ editedTodo, setEditedTodo ] = useState(todo.todo);\n\n    const loading = useSelector(state => state.todos.editTodo.loading)\n\n    const itsMe = () => {\n        console.log(todo.todo)\n    }\n    \n    return(\n        // <Wrapper onMouseLeave={() => setIsEditing(false)}>\n        <Wrapper> \n            <TodoContent>\n                {   \n                    (isEditing) ? (loading ? <EditingLoader/> : <EditTodo toEdit={setEditedTodo} todo={todo}/>) : <p>{todo.todo}</p>\n                }\n            </TodoContent>    \n            <Controls>\n                {\n                    isEditing \n                    ? <><i className=\"fas fa-check\" style={editStyles} onClick={ async () => { await modifyTodo(todo.id, editedTodo); setIsEditing(false)}}/> <i className=\"fas fa-times\" style={deleteStyles} onClick={() => setIsEditing(false)}/></>\n                    : <><i className=\"far fa-edit\" style={editStyles} onClick={()=>setIsEditing(true)}/> <i className=\"far fa-trash-alt\" style={deleteStyles} onClick={() => setIsDeleting(true)}/></>\n                }\n                <DeleteTodo \n                    show={isDeleting} \n                    close={() => setIsDeleting(false)} \n                    todo={todo}    \n                />\n            </Controls>\n        </Wrapper>\n    )\n}\n\nconst mapDispatchToProps = {\n    modifyTodo: actions.editTodo\n}\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport { firestoreConnect, useFirestoreConnect } from 'react-redux-firebase';\nimport { useSelector, connect } from 'react-redux'\nimport { compose } from 'redux'\n\nimport AddTodo from './addTodo';\nimport Loader from '../../components/loader/loader';\nimport Todo from './todo';\n\nconst TodosWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    /* background-color: red; */\n    display: flex;\n    flex-direction: column;\n    /* justify-content: center; */\n    h1{\n        text-align: center;\n    }\n\n`;\nconst TodosContainer = styled.div`\n    /* background-color: green; */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\n// const Todos = ({ todos, requested, userId }) => {   \n\nconst Todos = React.memo(({ todos, requested, userId }) => {\n\n    /*\n    // const todoId = 'Qkw18cnqIKPnugsRwdcYqfogiAp1';\n    const todoId = useSelector(state => state.firebase.auth.uid);\n\n    useFirestoreConnect(() => [\n        { collection: 'todos', doc: todoId } // or `todos/${props.todoId}`\n        ])\n    const myTodos = useSelector(({ firestore: { data } }) => data.todos && data.todos[todoId].todos)\n    // const requesting = useSelector(({firestore: { status }}) => status.requesting[`todos/${todoId}`])\n    const requested = useSelector(({firestore: { status }}) => status.requested[`todos/${todoId}`])\n    // useFirestoreConnect(() => [{collection: 'todos', doc: userId}])\n    // const myTodos = useSelector( ({ firestore: {data} }) =>  data.todos &&  data.todos[userId].todos)\n    */\n    \n    let content;\n    // if(!myTodos){\n    //     content = <Loader/>\n    // }else if(!myTodos && requested){\n    //     content = <p>You have no todos!</p>\n    // }else if(myTodos.length === 0){\n    //     content = <p>You have no todos!</p>\n    // }else {\n    //     content = myTodos.slice().reverse().map( todo => <Todo key={todo.id} todo={todo}/>) \n    // }\n\n        if(!todos){\n            content = <Loader/>\n        }else if((!todos[userId] && requested[`todos/${userId}`] || todos[userId].todos.length === 0)){ \n            content = <p>You have no todos!</p>\n        // }else if(todos[userId].todos.length === 0){\n        //     content = <p>You have no todos!</p>\n        }else {\n            content = todos[userId].todos.slice(0).reverse().map( todo => <Todo key={todo.id} todo={todo}/>) \n        }\n\n    \n/*\n    if(!todos){\n        content = <Loader/>\n    }else if(!todos[userId] && requested[`todos/${userId}`]){\n        content = <p>'You have no todos'</p>;\n    }else{\n        content = todos[userId].todos.map(todo => <Todo key={todo.id} todo={todo}/>)\n        content = myTodos.map(todo => <Todo key={todo.id} todo={todo}/>)\n    }\n*/\n\n    return (\n        <TodosWrapper>\n            <h1>Your ToDos</h1>\n            <TodosContainer>\n                <AddTodo/>\n                {content}\n            </TodosContainer>\n        </TodosWrapper>\n    )\n})\n\n// const mapStateToProps = ({ firebase, firestore }) => ({\n//     userId: firebase.auth.uid,\n//     todos: firestore.data.todos,\n//     requesting: firestore.status.requesting,\n//     requested: firestore.status.requested\n// });\n\n// const mapDispatchToProps = {};\n\nexport default compose(\n    // firestoreConnect(props => [`todos/${props.userId}`]),\n    // connect(mapStateToProps,\n    //     mapDispatchToProps\n    //     )\n    connect((state) => ({\n        userId: state.firebase.auth.uid,\n        todos: state.firestore.data.todos,\n        requested: state.firestore.status.requested\n      })),\n      firestoreConnect(props => [`todos/${props.userId}`]),\n)(Todos);\n\n// export default connect(mapStateToProps)(Todos);\n// export default Todos;\n\n\n// export default compose(\n//     firestoreConnect((props) => [\n//       { collection: 'todos', doc: props.todoId } // or `todos/${props.todoId}`\n//     ]),\n//     connect(({ firestore: { data } }, props) => ({\n//       todos: data.todos && data.todos[todoId]\n//     }))\n//    )(SomeComponent)"],"sourceRoot":""}